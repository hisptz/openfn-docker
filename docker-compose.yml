
services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_POSTGRES_CPUS:-0}'
          memory: '${DOCKER_POSTGRES_MEMORY:-0}'
    env_file:
      - .env
    image: 'postgres:15.3-alpine'
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    stop_grace_period: '3s'
    volumes:
      - 'postgres:/var/lib/postgresql/data'
  web:
    image: openfn/lightning:latest
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WEB_CPUS:-0}'
          memory: '${DOCKER_WEB_MEMORY:-0}'
    env_file:
      - .env
    depends_on:
      - postgres
    healthcheck:
      test: '${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:4000/health_check}'
      interval: '10s'
      timeout: '10s'
      start_period: '10s'
      retries: 3
    ports:
      - '${LIGHTNING_EXTERNAL_PORT:-${PORT-4000}}:${URL_PORT-4000}'
  worker:
    image: 'openfn/ws-worker:latest'
    deploy:
      resources:
        limits:
          cpus: '${DOCKER_WORKER_CPUS:-0}'
          memory: '${DOCKER_WEB_MEMORY:-0}'
    env_file:
      - .env
    depends_on:
      web:
        condition: service_healthy
        restart: true
    command: ['pnpm', 'start:prod', '-l', 'ws://web:${URL_PORT-4000}/worker']
    restart: '${DOCKER_RESTART_POLICY:-unless-stopped}'
    stop_grace_period: '3s'
    expose:
      - '2222'

volumes:
  postgres: {}
